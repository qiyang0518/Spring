Spring框架概述:
    1、Spring是轻量级的开源的JavaEE框架
    2、Spring可以解决企业应用开发的复杂性
    3、Spring有两个核心部分:IOC和AOP
        IOC:控制反转,把创建对象规程交给Spring进行管理
        AOP:面向切面,不修改源代码进行功能增强
    4、特点
        a、方便解耦、简化开发
        b、Aop编程的支持
        c、方便程序测试
        d、方便和其他框架进行整合
        e、方便进行事务操作
        f、降低API开发难度
    5、选取Spring5

入门案例:
    maven导入jar
    maven导入依赖包实例:
        spring核心包的引入，可以直接使用spring-context的artifactId。示例如下:
            <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-context</artifactId>
              <version>${version.spring}</version>
            </dependency>

Spring创建对象(配置文件创建对象)
    创建xml配置文件在其添加对象        <bean id = "user" class="com.spring5.User"></bean>
    在测试类中创建配置文件设置的对象:   User user = context.getBean("user",User.class);         //根据id值(小写),获取对象,并转换问User类


IOC底层原理:
    概念:控制反转,降低代码之间的耦合度,把对象的创建和对象之间的调用,交给spring管理
    目的:使用IOC降低代码间的耦合度
    底层原理:
    技术:xml解析、工厂模式、反射
        工厂模式:
            创建工厂类,获取对象类的方法(返回值为对象)
         xml解析:获取配置文件内容
    IOC过程:
        第一步:xml配置文件,配置创建的对象
        第二步:service类、dao类,创建工厂类
                xml解析获取对象
              通过反射创建对象
              Class clazz = Class.forName(classValue)
              (User)clazz.newInstance();
IOC接口:

IOC操作Bean管理(基于XML)
基于XML创建对象
<bean id = "user" class="com.spring5.User"></bean>
id:标签名,要求小写         class:类路径(java后的路径名称+类名)
1、在spring配置文件中,使用bean标签,标签里面添加对应属性,就可以实现对象创建
2、bean标签中常用属性
    id属性:给对象取一个标识
    class属性:类的全路径(包类路径)
    name属性:跟id作用一致(可以加特殊字符)
3、创建对象时,默认执行无参构造方法完成对象的创建

IOC操作Bean管理(基于注解)
1、DI:依赖注入(注入属性)
    使用set方法注入(bean、property)
    有参构造注入(创建类,定义属性)
    P名称空间注入
     a、使用p名称空间注入,可以简化基于xml配置            //xmlns:p="http://www.springframework.org/schema/p"
        步骤: 在配置文件(bean.xml)中添加p名称空间
              在bean标签里,进行属性的注入(前提是在类声明时添加属性设置方法setter)             //<bean id="book" class="org.example.Demo" p:sName="小明" p:age="20">
2、字面量
    a、null
    <property name="address">
    <null/>
    </property>
    b、属性值包含特殊字符
    1、把<>进行转义&lt,&gt
    2、把特殊符号内容写到CDTA
    <property name="address">
    <value><![CDATA[<<南京>>]]></value>
    <property>
3、
    注入属性-外部bean
        1、创建两个类service类和dao类(在配置文件(bean.xml)中,)
        2、在service调用dao里面的的方法
        3、在spring的配置文件中,创建两个类的对象
    注入属性-级联赋值
        1、一对多关系,部门员工
        2、在实体类中实现一对多
        3、在spring配置文件中进行配置(bean的嵌套)

4、xml注入集合属性
    1、注入数组
    2、注入List
    3、注入map
    4、注入集合

    配置文件中配置各属性
    <bean id="stu" class="collectionType.Stu">
            <property name="courses">
                <array>
                    <value>java课程</value>
                    <value>大学英语</value>
                    <value>高等数学</value>
                </array>
            </property>
            <property name="list">
                <list>
                    <value>张三</value>
                    <value>三儿</value>
                    <value>小张</value>
                    <value>张儿</value>
                </list>
            </property>
            <property name="maps">
                <map>
                    <entry key="JAVA" value="java"></entry>
                    <entry key="MATH" value="高数"></entry>
                    <entry key="ENGLISH" value="大学英语"></entry>
                </map>
            </property>
            <property name="sets">
                <set>
                    <value>1</value>
                    <value>2</value>
                    <value>3</value>
                </set>
            </property>
        </bean>

5、在集合内设置对象类型值
        <bean>
            <property name="courseList">
                <!--注入值-->
                <list>
                <!--外部注入多个course类,并根据id调用类-->
                    <ref bean="course1"></ref>
                    <ref bean="course2"></ref>
                    <ref bean="course3"></ref>
                </list>
            </property>
        </bean>
        <!--创建多个对象-->
        <bean id="course1" class="collectionType.Course">
            <property name="cName" value="Java"></property>
        </bean>
        <bean id="course2" class="collectionType.Course">
            <property name="cName" value="C++"></property>
        </bean>
        <bean id="course3" class="collectionType.Course">
            <property name="cName" value="Python"></property>
        </bean>
6、把集合注入部分提取出
    1.在配置文件中引入名称空间值util
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    2.使用util完成集合的注入
        <!--集合类型的注入-->
            <util:list id="bookList">
                <value>三国演义</value>
                <value>水浒传</value>
                <value>西游记</value>
            </util:list>
        <!--注入的使用-->
            <bean id="book" class="collectionType.Book">
                <property name="list" ref="bookList"></property>
            </bean>
        </beans>



IOC思想基于IOC容器完成,IOC容器底层就是对象工厂
Spring提供IOC容器实现两种方式(两个接口)
1、BeanFactory:IOC容器基本实现:是Spring内部的使用接口,不提供开发人员使用
特点:加载配置文件时,在获取对象时或使用对象时才创建对象
2、ApplicationContext:BeanFactory接口的子接口,提供更强大的功能一般由开发人员使用
特点:加载配置文件时就创建对象(通常使用)
ApplicationContext接口实现类

IOC具体操作
Bean管理(两个操作)
a、由Spring创建对象
b、Spring注入属性


IOC操作Bea管理(FactoryBean)
1.Spring中有两种bean(普通bean,工厂bean(FactoryBean))
    普通bean:在配置文件中定义类型就是返回类型
    工厂bean:定义的bean可以与返回的类型不一致
        创建类,让类作为工厂bean,实现接口FactoryBean
        实现接口里面的方法,在实现的方法中定义返回的bean类型
IOC操作Bea管理(bean的作用域)
    1.在spring中,可以设置bean实例是单实例还是多实例
    2.在spring,bean默认为单实例
    3.如何设置作用域
        1.在spring配置文件bean中有属性标签scope,设置作用域
        2.scope属性值
            默认值singleton,表示单实例
            prototype,表示多实例
        singleton和prototype的区别
            设置scope为prototype是,在加载spring配置文件时,在调用getBean()时,创建多实例对象
        request:请求
        session:会话

IOC操作Bea管理(Bean)
IOC操作Bea管理(bean的生命周期)
  1.生命周期
    从对象到对象销毁的过程
  2.bean的生命周期
    创建bean实例(通过无参构造器创建)
    为bean的属性设置值和对其他bean引用(调用set方法)
    调用bean的初始化的方法(需要进行配置)
    bean可以使用了
    当容器关闭时,调用bean的销毁方法(需要进行配置销毁方法)
  3.代码演示(采用该方法测试)
    @org.junit.jupiter.api.Test
        void MyTest()
        {
            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("bean4.xml");
            Orders orders = context.getBean("orders",Orders.class);
            System.out.println("获取bean对象");
            System.out.println(orders);
            //手动让bean实例销毁
            context.close();
        }
   4.bean的后置处理器
    在调用set方法后,把实例传递bean后置处理器
    在bean初始化后,同样把实例传递bean后置处理器
   5.演示添加后置处理器
    1.创建类,实现接口BeanPostProcessor,创建后置处理器
IOC操作Bean管理(xml自动装配)
    自动装配:根据指定的装配规则(属性名称或者属性类型),spring自动匹配属性值进行注入
    演示:
    在bean标签中有autoWire属性:byName(根据名称注入),注入值bean的id和类属性名称一致
                            byType(根据类型注入),注意相同类型的bean只能声明一个(否则会报错)
IOC操作Bean管理(外部属性文件)
    1.配置数据库信息
        1.配置德鲁伊连接池
        2.引入德鲁伊连接池依赖jar包
        <!--直接配置连接池-->
            <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--${jdbc.driverClass}-->
                <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <!--${jdbc.ur}-->
                <property name="url" value="jdbc://mysql://localhost:3306/root/jdbc_mysql"></property>
        <!--${jdbc.username}-->
                <property name="username" value="root"></property>
        <!--${jdbc.password}-->
                <property name="password" value="0518"></property>
            </bean>
    2.引入外部属性文件配置数据库连接池
        1.创建外部属性文件,properties文件,写数据库信息
          prop.driverClass=com.mysql.jdbc.Driver
          prop.url=jdbc://mysql://localhost:3306/root/jdbc_mysql
          prop.userName=root
          prop.password=0518
         2.把外部properties文件引入到spring配置文件中
            1.引入context名称空间
               xmlns:context="http://www.springframework.org/schema/context"
               xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"  >
            2.配置连接池
              <!--引入外部属性文件-->
              <context:property-placeholder location="jdbc.properties"></context:property-placeholder>
                  <!--直接配置连接池-->
                  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
                      <!--${jdbc.driverClass}-->
                      <property name="driverClassName" value="${jdbc.driverClass}"></property>
                      <!--${jdbc.ur}-->
                      <property name="url" value="${jdbc.ur}"></property>
                      <!--${jdbc.username}-->
                      <property name="username" value="${jdbc.username}"></property>
                      <!--${jdbc.password}-->
                      <property name="password" value="${jdbc.password}"></property>
                  </bean>

IOC操作Bean管理(基于注解方式)
1.注解
    1.注解:代码里特殊的标识,格式:@注解名称(属性名称=属性值,...)
    2.使用注解
      作用在类,方法,属性上
    3.作用:简化xml配置
2.spring针对bean管理中创建对象提供的注解方式
    1.@Component:通用
    2.@Service:主要用于业务逻辑层,服务层
    3.@Controller:用于外部层
    4.@Repository:
    四个注解都可以用于创建bean对象
3.基于注解方式创建对象
    1.引入aop依赖
    2.在配置文件中创建context名称空间,开启组件的扫描
        <context:component-scan base-package="dao,service"></context:component-scan>
    3.创建类,在类上面添加对象注解
        //等价于 <bean id="userService> class=""/>
        //在注解里value属性值可以省略,默认为类名称小写
        @Component(value = "userService")
    4.开启组件扫描细节配置
        默认扫描包中的所有类
        开启特定注解扫描
        扫描特选注解
        <context:component-scan base-package="dao,service" use-default-filters="false">
            <context:include-filter type="annotation"
                                    expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
        不扫描排除注解
        <context:component-scan base-package="dao,service" use-default-filters="false">
        <context:exclude-filter type="annotation"
                            expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
     5.基于注解方式实现属性注入
        1.@AutoWired:根据属性类型自动注入
            把service和dao对象创建(添加注解进行对象创建)
            在service里注入dao对象,在service类添加dao对象属性,在到属性上添加注解(不需要set方法直接创建对象)
        2.@Qualifier:根据属性名称进行注入和@AutoWired一起使用
            @Autowired
            @Qualifier(value = "userDaoImpl")       //value为UserDao实现类的注解id,默认为类名开头小写userDaoImpl
            private UserDao userDao;
        3.@Resource:可以根据类型注入(不加name属性),也可以根据名称注入(添加name属性)
            @Resource(name = "userDaoImpl")
            private UserDao userDao;
        4.@Value:注入普通类型属性(给属性赋值)
            @Value(value = "abc")
            private String name;
     6.纯注解开发
        1.创建配置类,替换xml配置文件
            @Configuration  //作为配置类,替换xml配置文件
            @ComponentScan(basePackages = "dao,service")       //扫描指定包中的类
            public class SpringConfig {}
        2.编写测试类
        在测试类中把
            ClassPathXmlApplicationContext context =
                            new ClassPathXmlApplicationContext("bean1.xml");

            改为,其余不变
            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);





AOP(概念)
    1.定义:面向切面编程,对业务的各个部分进行隔离,从而使业务间的耦合度降低,提高程序的可重用性,提高开发效率
    2.通俗描述:不修改源代码,在主干功能里添加新功能
AOP(底层原理)
    1.AOP底层使用动态代理
        1.两种动态代理
            1.有接口型,使用JDK动态代理
                JDK动态代理,创建与接口实现类等价的代理对象
            2.无接口型,使用CGLIB动态代理
AOP(JDK动态代理)
1.使用JDK动态代理,使用Proxy类中的方法创建代理对象
    1.调用newProxyInstances方法
                 ClassLoader loader:指定类加载器
                 Class<?>[] interfaces:指定代理有实现方法(接口数组)
                 InvocationHandler h:指定生成的代理对象做什么(用匿名内部类实现)
                //创建代理对象
                Star starProxy = (Star) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),new Class[]{Star.class},new InvocationHandler()
                {
                    //回调方法
                    @Override
                    public Object invoke(Object proxy,Method method,Object[] args) throws Throwable
                    {
                        //代理对象具体做什么,在这里实现
                        //判断传入方法是否为sing方法,true则传入superStar及其他参数
                        if(method.getName().equals("sing"))
                        {
                            System.out.println("准备话筒...");
                        }
                        else if(method.getName().equals("dance"))
                        {
                            System.out.println("准备场地...");
                        }
                        return method.invoke(superStar,args);
                    }
                });
                return starProxy;
2.编写JDK动态代理代码
    1.创建接口,定义方法
    2.创建接口实现类,实现方法
    3.使用Proxy类创建接口代理对象

AOP(术语)
1.连接点
    类的哪些方法可以被增强,这些方法成为连接点
2.切入点
    实际被真正增强的方法,称为切入点
3.通知(增强)
    1.实际增强的逻辑部分称为通知
    2.通知有多种类型
        1.前置通州
        2.后置通知
        3.环绕通知
        4.异常通知
        5.最终通知:类似于finally
4.切面
    动作,把通知应用到切入点的过程

AOP操作(准备)
1.Spring框架一般基于AspectJ实现AOP操作
    1.AspectJ:
    独立的aop框架,结合AspectJ和spring框架共同使用,进行AOP操作
2.基于AspectJ实现AOP操作
    1.基于xml配置文件实现
    2.基于注解方式实现(使用)
3.在项目中引入AOP相关的依赖

4.切入点表达式
    1.作用:知道对哪个类中的哪个方法进行增强
    2.语法结构
        execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))
      实例1:dao.BookDao类中的add方法进行增强
        execution(* dao.BookDao.add(..))
      实例2:对dao.BookDao中的所有方法进行增强
        execution(* dao.BookDao.*(..))
      实例3.对dao包中所有类所有方法进行增强
        execution(* dao.*.*(..))

AOP操作(AspectJ注解)(常用)
    1.创建类.类中定义方法
    2.创建增强类(编写增强逻辑)
        在增强类中,创建方法,让不同的方法代表不同的通知类型
    3.进行通知的配置
        1.在spring配置文件中,开启注解扫描
            创建context,aop名称空间,对目标类进行扫描(可通过包名,类名,方法名细分)
        2.使用注解创建User和UserProxy
            在原始类和增强类上添加同一注解(@Component)
        3.在增强类上面添加注解@Aspect
            开启生成代理对象
            <!--开启aspect生成代理对象-->
            <!--类上有@Aspect注解,则该生成为代理对象-->
            <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
        4.在spring配置文件中,开启生成代理对象
    4.配置不同类型通知
        @Before:方法前执行
        @After:方法后执行
        @AfterReturning:返回结果之后执行
        @AfterThrowing:出现异常后执行
        @Around:在增强方法前后执行,类似于上下限
        @Order(数值):优先级设置,数值越小优先级越高,可使用于同一目标增强类,同一目标增强方法中
        在增强类中,在作为通知方法上添加通知类型注解,使用切入点表达式配置
            @Before(value = "execution(* aop.User.add(..))")
        环绕通知:在方法之前之后都会执行
            @Around(value = "execution(* aop.User.add(..))")
                public void around(ProceedingJoinPoint point) throws Throwable
                {
                    System.out.println("around before...");
                    point.proceed();
                    System.out.println("around after...");
                }
    5.相同切入点提取
        //相同切入点的提取
        @Pointcut(value = "execution(* aop.User.add(..))")
        public void pointCatch(){}
        @Before(value = "pointCatch()")
    6.有多个增强类多个同一方法进行增强,设置增强类优先级
        1.在增强类上添加@Order(数值)注解,值越小优先级越高

    7.完全使用注解开发
        创建配置类,不需要创建配置文件
         //配置类
         @Configuration
         //开启组件扫描
         @ComponentScan(basePackages = {"aop"})
         //生成代理对象(proxyTargetClass默认为false)
         @EnableAspectJAutoProxy(proxyTargetClass = true)
         public class ConfigAop{}


AOP操作(AspectJ配置文件)(使用较少)
    1.创建两个类,增强类和被增强类,创建方法
    2.在spring配置文件中创建两个类对象
    3.在spring配置文件中配置切入点,配置切面
        <!--创建两个类对象-->
        <bean id="book" class="aopXml.Book"></bean>
        <bean id="bookProxy" class="aopXml.BookProxy"></bean>
        <!--配置aop增强-->
        <aop:config>
            <!--配置切入点-->
            <aop:pointcut id="point" expression="execution(* aopXml.Book.buy())"></aop:pointcut>
            <!--配置切面-->
            <aop:aspect ref="bookProxy">
                <!--增强具体作用的方法-->
                <!--将before方法在切点为point的buy方法前执行-->
                <aop:before method="before" pointcut-ref="point"></aop:before>
            </aop:aspect>
        </aop:config>


JdbcTemplate(概念和准备)
1.jdbcTemplate
    1.spring框架对JDBC进行封装,使用JdbcTemplate方便实现对数据库操作
2.准备工作
    1.引入相关依赖包